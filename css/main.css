/* CUSTOM PROPERTIES*/
:root {
    --leading: 2em; /*reausable property just call as var(--leading) for this one and allows to apply everywhere*/
}


body {
    font-family: 'Montserrat',sans-serif;
    margin: 0;
}

.hero-bg {
    background: #307D99 url("../images/oranges.jpg");
    background-size: cover;
    background-position: 20% 50%; /*first ,oves X index , second Y dimension*/
    color: white;
    text-align: center;
    padding-bottom: 4em ;
}


 /*   a inside header only modifier */
.hero-bg a{ 
    color:white;
    text-decoration: none; 
    /* this deleates underline on link a into header */
    font-weight: bold;
    font-size: 1.2rem;
     /* why rem, well for fonts I prefer to use rem for responsive concern*/
}

header{
    padding: 1em 0em;
}

section {
    margin: 0 1em;
}

 h1 {
    font-size: 2.5rem;
    margin: 2em 0 1.2em;
}

h1 span {
    text-transform: uppercase;  /*change caracther to uppercase from original*/
    display: block; /* showing text on his own line rest of the h1 goes in next line*/
    font-size: 1.4rem;
    position: relative; /*this can't be seen over before pseudo element without declaring as relative position*/
    z-index: 1;
}

h1 span::before { /*this  adds a pseudo element so this means an extra element just before original creating a first child for this element, use after to apply this before original*/
    content: ''; /*text inside this elelment , I want content empty no text attached on it*/
    position: absolute;  /* absolute respect to its parent element who should be relative position*/
    width: 3em;
    background-color: #00BFFF;
    height: .4em;
    bottom: 0;
    z-index: -1; /* This moves color line before h1 span text that is in level 1*/
    margin-left: -.3em;  /*negative because I just want the line a littler to the left form original position*/
}

.hero-bg p {
    font-weight: bold;
    margin: 0 1em 3em;
}


.form-container {
    background-color: white;
    margin: 2em -1em 0; /* this -1em for sides makes this form container goes over its form-container*/ 
    padding: 2em; /*this separete content from borders pushing element more to the center of container*/
}

label {
    color: #2D7D98;
    font-weight: bold;
    display: block;  /* making 'Enter your city'  text goes alone into the line, input goes next line then*/
    font-size: 1.2em;
    margin-bottom: 1em; 
}
/* I've two input elements right now , but by the moment I just would like to pick my elements up based on type so [] allow to specify this*/
input[type=text] { 
    border: 1px solid #707070; /* makes easier so see the line being solid this border specification also allows to declare color */
    width: 100%; /* This means take all the line width*/  /*NOTE: this used together with padding 1em will add to right undesired space for 1em
    to avoid this we should add box-sizing: border-box this always happen when conbines 100% on width making use of padding at the same time*/
    padding: 1em; /*this makes more space inside input */
    box-sizing: border-box;
    border-radius: .5em;  /*this rounds boder for input tetx */
    margin-top: 1.2em;
    font-weight: bold;

 
 
}

.form-container p {
    color: grey ;
    margin-bottom: 1.5em;
    margin-top: .3em;
    font-weight: normal;
    font-size: .9em;
}

input[type=button] {
    background-color: #F89104;
    
    width: 100%;
    border:none;
    border-radius: .5em;
    color: white;
    font-size: 1.3em;
    font-weight: bold;
    cursor: pointer; /*This changes the cursor shape when hoover this button*/
    padding: 1em 0;
}

input[type=button]:hover { /*this add styles modification in case of : '' for this case when hover*/
    background-color: rgb(190, 114, 8);
}

.authentic {
    margin: 0;
}

.right-col {
    text-align: center;
    margin: 3em 1em;
}
h2 {
    text-transform: uppercase;
    position:relative;
}


h2::before { /*this  adds a pseudo element so this means an extra element just before original creating a first child for this element, use after to apply this before original*/
    content: ''; /*text inside this elelment , I want content empty no text attached on it*/
    position: absolute;  /* absolute respect to its parent element who should be relative position*/
    width: 8em;
    background-color: #00BFFF;
    height: .4em;
    bottom: 0;
    z-index: -1; /* This moves color line before h1 span text that is in level 1*/
    margin-left: -.3em;  /*negative because I just want the line a littler to the left form original position*/
}


img {
    width: 100%; /*100% of what user can see, original image in reality is super big but adjust to user window now*/
}

p {
    line-height: var(--leading);
}

.overlay    {
    position: absolute;
    z-index: 1; /* taking it to front over animation effect*/
    height: 120vh; /*viewport height*/
    width: 100%;
    background: rgb(0, 0, 0,.9); /*black in 90% of transparency*/
    place-content: center; /*content text should be in the middle this requires to call display :grid property*/
    color: white;
    display: none; /*display only activates if place-content 'center' is activated*/
    opacity: 0; /*I dont want to see this by default just when button click event is triggered I will change this to 1 */
}

.animate-overlay{
    animation: overlay 3s forwards; /* first animation name, then duration, finally what next*/
}

/* between 730 and 930px for laptop */
@media (min-width: 730px) {
    section {
        margin: 0 4em;
    }

    .form-container {
        margin: 2em -4em 0; /* this -1em for sides makes this form container goes over its form-container*/ 
  }
}


/* Desktop from 930px */
@media (min-width: 930px) {
    .hero-bg {
        text-align: left;
    }

    .hero-bg p {
    margin: 0 0 3em;
    }
    .hero-bg section {
        width: 65%;
    }

    .form-container{
       margin: 2em 0 0;
       padding: 2em;
       border-radius: .5em;
       box-shadow: 10px 10px 10px rgba(0,0,0,.3);  /* first px right direction it could be negative and goes oposite to left
       second number bottom direction negative allowed, next blur extension finally number of color code*/
    }
    form{
        display:flex;
    }

    .form-left{
        width: 70%;
    }
    input[type="button"]{
        height: fit-content;
        font-size: 1em;
        margin-left: 1em;
        margin-top: 3em;
        padding: .8em 0;
        width: 30%;
    }

    input[type="text"]{
      padding-bottom: 1.5em;
      position: relative;
      bottom: 7px;
    }
    .hero-bg p{
        margin-bottom: 0;
    }
    section.authentic{
        display: grid;    /* Using grid to create columns, also it will allow to flip elemetns as indicated on original design*/
        grid-template-columns: repeat(2, 50%);  /* this means 2 columns 50% each*/
    grid-template-areas:
    "bowl content"; /*selectors names for elements to flip will be asigned on property grid-area for each selector img and right-col should define same name acording to order
    "bowl" goes first col second col "content"*/
}
    .right-col {
        grid-area: content; /*asigning name to this selector for grid use*/
        padding: 0 10%;
        text-align: left;
        align-self: center;
  
    }
    img {
        grid-area: bowl;
    }
    h2 {
        margin: 0;
    }

}

/***  ANIMATIONS  ***/

.top {
    animation: fadeIn 2s forwards; /* assins name in this case fadeIn , 2s for duration of animations and fordwars to not keep looping the animation for ever and continue*/
}

@keyframes fadeIn {  /* fadeIn animation definition*/
    from {  /* initial state*/
        opacity: 0;    
        transform: translateY(-2em); /* moving elements on Y coord*/

    }
    to {  /* final state*/
        opacity: 1;
        transform: translateY(0);  
    }
}

 @keyframes overlay { 
    0% {  /* time percentage*/
        opacity: 0;    
    }
    30% {  
        opacity: 1;
    }
    70% {  
        opacity: 1;
    }
    100% {  
        opacity: 0;
    }
} 